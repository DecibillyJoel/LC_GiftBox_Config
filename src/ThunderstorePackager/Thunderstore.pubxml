<Project>

  <!-- 
    If we are building, then this TS package and 
    any sub-packages will be built and outputted
    If we are publishing, only this TS package 
    will be built and outputted
  -->

  <PropertyGroup>
    <DeleteExistingFiles>True</DeleteExistingFiles>
    <DeployAsIisApp>False</DeployAsIisApp>
    <EnableMSDeployAppOffline>True</EnableMSDeployAppOffline>
    <EnableMSDeployBackup>False</EnableMSDeployBackup>
    <ExcludeApp_Data>True</ExcludeApp_Data>
    <ExcludeFilesFromAppData>True</ExcludeFilesFromAppData>
    <ExcludeFilesFromDeployment>bin\**;obj\**</ExcludeFilesFromDeployment>
    <LastUsedBuildConfiguration>Release</LastUsedBuildConfiguration>
    <LastUsedPlatform>Any CPU</LastUsedPlatform>
    <LaunchSiteAfterPublish>False</LaunchSiteAfterPublish>
    <MSDeployPublishMethod>FileSystem</MSDeployPublishMethod>
    <PublishDir Condition="'$(IsTSPackager)' == 'True'">$(PackageDir)artifacts\tspublish\</PublishDir>
    <PublishFramework>$(TargetFramework)</PublishFramework>
    <PublishProtocol>FileSystem</PublishProtocol>
    <SkipACLAttribute>True</SkipACLAttribute>
    <SkipAppDataFolder>True</SkipAppDataFolder>
    <SkipExtraFilesOnServer>True</SkipExtraFilesOnServer>
    <UsePowerShell>False</UsePowerShell>
    <WebPublishMethod>FileSystem</WebPublishMethod>
  </PropertyGroup>

  <!-- 
    This determines if the package is 
    a sub-package or a lib and disables 
    publishing if so.
  -->
  <PropertyGroup>
    <IsPublishable Condition="'$(PackageDir)' == '$(SolutionDir)'">True</IsPublishable>
    <IsPublishable Condition="'$(PackageDir)' != '$(SolutionDir)'">False</IsPublishable>
    <IsPublishable Condition="$(MSBuildProjectDirectory.startsWith('$(PackageDir)lib\'))">False</IsPublishable>
  </PropertyGroup>

  <!-- 
    Clean output dirs (ThunderstorePackager version)
    This targets both its own output and the output from
    any projects that are not members of the src folder
  -->

  <Target 
    Name="CustomCleanTSPackager" 
    Condition="'$(IsTSPackager)' == 'True'"
  >
    <ItemGroup>
      <!-- Clean all files in the publish dir -->
      <CustomCleanTSPackagerFiles Include="$(PublishDir)**\*" />
      <!-- Clean subdirs in the publish dir -->
      <CustomCleanTSPackagerDirs 
        Condition="Exists('$(PublishDir)build')"
        Include="$([System.IO.Directory]::GetDirectories('$(PublishDir)build'))" />
      <CustomCleanTSPackagerDirs 
        Condition="Exists('$(PublishDir)dist')"
        Include="$([System.IO.Directory]::GetDirectories('$(PublishDir)dist'))" />
      <!-- Compile collection of all projects' artifact dirs -->
      <CustomCleanTSPackagerDirs 
        Condition="Exists('$(ArtifactsPath)\bin')"
        Include="$([System.IO.Directory]::GetDirectories('$(ArtifactsPath)\bin'))" />
      <CustomCleanTSPackagerDirs 
        Condition="Exists('$(ArtifactsPath)\obj')"
        Include="$([System.IO.Directory]::GetDirectories('$(ArtifactsPath)\obj'))" />
      <CustomCleanTSPackagerDirs 
        Condition="Exists('$(ArtifactsPath)\publish')"
        Include="$([System.IO.Directory]::GetDirectories('$(ArtifactsPath)\publish'))" />
      <!-- Compile collection of all projects (except the packager itself) -->
      <CustomCleanTSPackagerListOfSrcProjects Include="$(PackageDir)**\*.csproj" />
      <CustomCleanTSPackagerListOfSrcProjects Include="$(PackageDir)**\*.proj" />
      <CustomCleanTSPackagerListOfSrcProjects Remove="$(MSBuildProjectFullPath)" />
      <!-- Remove all projects from the to-be-cleaned artifact dirs (except the packager itself) -->
      <CustomCleanTSPackagerDirs Remove="$(ArtifactsPath)\bin\%(CustomCleanTSPackagerListOfSrcProjects.Filename)" />
      <CustomCleanTSPackagerDirs Remove="$(ArtifactsPath)\obj\%(CustomCleanTSPackagerListOfSrcProjects.Filename)" />
      <CustomCleanTSPackagerDirs Remove="$(ArtifactsPath)\publish\%(CustomCleanTSPackagerListOfSrcProjects.Filename)" />
    </ItemGroup>
    <Delete Condition="'@(CustomCleanTSPackagerFiles)' != ''" Files="@(CustomCleanTSPackagerFiles)" />
    <RemoveDir Condition="'@(CustomCleanTSPackagerDirs)' != ''" Directories="@(CustomCleanTSPackagerDirs)" />
  </Target>

  <!-- 
    Clean output dirs (csproj version)
  -->

  <Target 
    Name="CustomCleanSrcProject" 
    Condition="'$(IsTSPackager)' == 'False'"
  >
    <ItemGroup>
      <!-- Clean all files in the project's bin and publish artifact dirs -->
      <CustomCleanSrcProjDirs 
        Condition="Exists('$(ArtifactsPath)\bin\$(MSBuildProjectName)')"
        Include="$([System.IO.Directory]::GetDirectories('$(ArtifactsPath)\bin\$(MSBuildProjectName)'))" />
      <CustomCleanSrcProjDirs 
        Condition="Exists('$(ArtifactsPath)\publish\$(MSBuildProjectName)')"
        Include="$([System.IO.Directory]::GetDirectories('$(ArtifactsPath)\publish\$(MSBuildProjectName)'))" />
      <!-- Delete old BepPluginInfo.cs file (it has been replaced with LCMProjectInfo.cs) -->
      <CustomCleanSrcProjFiles Include="$(ArtifactsPath)\obj\$(MSBuildProjectName)\**\BepPluginInfo.cs" />
    </ItemGroup>
    <Delete Condition="'@(CustomCleanSrcProjFiles)' != ''" Files="@(CustomCleanSrcProjFiles)" />
    <RemoveDir Condition="'@(CustomCleanSrcProjDirs)' != ''" Directories="@(CustomCleanSrcProjDirs)" />
  </Target>

  <!--
    Entry point for CustomClean targets
  -->

  <Target 
    Name="CustomClean" 
    BeforeTargets="Clean"
    DependsOnTargets="CustomCleanSrcProject;CustomCleanTSPackager"
  />

  <!-- 
    All following targets are ran only by 
    ThunderstorePublisher, and only after 
    all dependent projects have built. 
  -->

  <!-- 
    Entry points called on build/rebuild and publish.
  -->

  <Target
    Name="StartThunderstoreBuild"
    AfterTargets="Build;Rebuild"
    Condition="'$(IsTSPackager)' == 'True'"
  >
    <PropertyGroup>
      <BuildMode>build</BuildMode>
    </PropertyGroup>
  </Target>

  <Target Name="StartThunderstorePublish"
    AfterTargets="Publish"
    Condition="'$(IsTSPackager)' == 'True' And '$(IsPublishable)' == 'True'"
  >
    <PropertyGroup>
      <BuildMode>publish</BuildMode>
    </PropertyGroup>
  </Target>

  <!--
    Invokes the remaining Thunderstore build/publish targets.
  -->

  <Target Name="CoreThunderstoreBuild"
    AfterTargets="StartThunderstoreBuild;StartThunderstorePublish"
    Condition="'$(BuildMode)' != ''"
    DependsOnTargets="CustomClean;ValidateThunderstorePackageProps;UpdateThunderstoreTOML;StageThunderstorePackage;CallTCLI;EmitThunderstoreSubpackages"
  />

  <!-- 
    Ensure name, author, description and URL contain 
    only valid characters, and version is in the
    correct format, and description is not too long
  -->

  <Target Name="ValidateThunderstorePackageProps">
    <PropertyGroup>
      <PackageName_InvalidMatch>$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(PackageName)',
          "([^\w])"
        )
      )</PackageName_InvalidMatch>
      <PackageAuthor_InvalidMatch>$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(PackageAuthor)',
          "([^\w])"
        )
      )</PackageAuthor_InvalidMatch>
      <PackageDesc_InvalidMatch>$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(PackageDesc)',
          "([^\x00-\x7F]|.{251,})"
        )
      )</PackageDesc_InvalidMatch>
      <PackageUrl_InvalidMatch>$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(PackageUrl)',
          "([^\w\.:/\-+!*'\(\)?%=&amp;])"
        )
      )</PackageUrl_InvalidMatch>
      <PackageVersion_ValidMatch>$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(PackageVersion)',
          "^(?:(\d+)\.){0,2}(\d+)$"
        )
      )</PackageVersion_ValidMatch>
    </PropertyGroup>

    <!-- If any matches are found, throw error -->
    <Error Condition="'$(PackageName_InvalidMatch.Length)' > 0" Text="PackageName (defined in Directory.Build.props) contains invalid characters: $(PackageName_InvalidMatch)" />
    <Error Condition="'$(PackageAuthor_InvalidMatch.Length)' > 0" Text="PackageAuthor (defined in Directory.Build.props) contains invalid characters: $(PackageAuthor_InvalidMatch)" />
    <Error Condition="'$(PackageDesc_InvalidMatch.Length)' > 250" Text="PackageDesc (defined in Directory.Build.props) cannot exceed 250 characters!" />
    <Error Condition="'$(PackageDesc_InvalidMatch.Length)' > 0" Text="PackageDesc (defined in Directory.Build.props) contains invalid characters: $(PackageDesc_InvalidMatch)" />
    <Error Condition="'$(PackageUrl_InvalidMatch.Length)' > 0" Text="PackageUrl (defined in Directory.Build.props) contains invalid characters: $(PackageUrl_InvalidMatch)" />  
    <Error Condition="'$(PackageVersion_ValidMatch.Length)' == 0" Text="PackageVersion (defined in Directory.Build.props or by GitHub release tag) is not in valid format (e.g. 'major.minor.patch'): $(PackageVersion)" />
  </Target>

  <!-- 
    Update package description and 
    URL in thunderstore.toml 
  -->
  <Target Name="UpdateThunderstoreTOML">
    <PropertyGroup>
      <TOML_Contents>$([System.IO.File]::ReadAllText("$(MSBuildProjectDirectory)\thunderstore.toml"))</TOML_Contents>
      <TOML_NewContents>$(
        [System.Text.RegularExpressions.Regex]::Replace(
          $(
            [System.Text.RegularExpressions.Regex]::Replace(
              '$(TOML_Contents)',
              '(\n[ \t]*description[ \t]*=[ \t]*)".*"', 
              '$1"$(PackageDesc)"'
            )
          ),
          '(\n[ \t]*websiteUrl[ \t]*=[ \t]*)".*"', 
          '$1"$(PackageUrl)"'
        )
      )</TOML_NewContents>
    </PropertyGroup>
    <WriteLinesToFile File="$(MSBuildProjectDirectory)\thunderstore.toml" Lines="$(TOML_NewContents)" Overwrite="True" WriteOnlyWhenDifferent="True" />
  </Target>

  <!-- 
    Stage Thunderstore package for final output
  -->

  <Target Name="StageThunderstorePackage">
    <!-- Delete .gitkeep files in publish dir -->
    <ItemGroup>
      <FilesToUnstage Include="$(PublishDir)**\.gitkeep" />
    </ItemGroup>
    <Delete Condition="'@(FilesToUnstage)' != ''" Files="@(FilesToUnstage)" />
    <!-- Determine the artifacts dir of the output type we're interested in -->
    <PropertyGroup>
      <ArtifactsTypeToStage>bin</ArtifactsTypeToStage>
      <ArtifactsTypeToStage Condition="'$(BuildMode)' == 'publish'">publish</ArtifactsTypeToStage>
    </PropertyGroup>
    <ItemGroup>
      <!-- Collect list of all source projects -->
      <SrcProjectsToStage Include="$(PackageDir)src\**\*.csproj" />
      <!-- Stage all project files under the determined artifacts type -->
      <FilesToStage Include="$(ArtifactsPath)\$(ArtifactsTypeToStage)\%(SrcProjectsToStage.Filename)\$(Configuration.ToLower())\**\*" />
      <!-- Ignore gitkeeps and unneeded assemblies-->
      <FilesToStage Remove="$(PackageDir)**\.gitkeep" />
      <FilesToStage Remove="$(PackageDir)**\0Harmony.dll" />
      <FilesToStage Remove="$(PackageDir)**\Assembly-CSharp.dll" />
      <FilesToStage Remove="$(PackageDir)**\BepInEx.dll" />
      <FilesToStage Remove="$(PackageDir)**\Mono.Cecil*.dll" />
      <FilesToStage Remove="$(PackageDir)**\MonoMod.*.dll" />
      <FilesToStage Remove="$(PackageDir)**\Newtonsoft.Json.dll" />
      <FilesToStage Remove="$(PackageDir)**\System.*.dll" />
      <FilesToStage Remove="$(PackageDir)**\UnityEngine*.dll" />
      <!-- Stage markdown files (except README.md) -->
      <FilesToStage Include="$(PackageDir)docs\*.md" Exclude="$(PackageDir)docs\README.md" />
    </ItemGroup>
    <Copy
      DestinationFolder="$(PublishDir)dist\%(RecursiveDir)"
      SourceFiles="@(FilesToStage)"
    />
  </Target>

  <!-- 
    Run TCLI to create Thunderstore package, 
    and upload it if we're publishing
  -->

  <Target Name="CallTCLI">
    <Exec
      Command='dotnet tcli $(BuildMode) --package-name "$(PackageName)" --package-namespace "$(PackageAuthor)" --package-version "$(PackageVersion)"'
      ConsoleToMSBuild="true"
      WorkingDirectory="$(MSBuildProjectDirectory)"
    />
  </Target>

  <!-- 
    Copy subpackages to artifacts if we are
    not a subpackage and are not publishing
  -->

  <Target 
    Name="EmitThunderstoreSubpackages" 
    Condition="'$(BuildMode)' != 'publish' And '$(IsPublishable)' == 'True'"
  >
    <ItemGroup>
      <SubPackagesToEmit Include="$(PackageDir)**\artifacts\tspublish\build\*.zip" />
      <SubPackagesToEmit Remove="$(PublishDir)build\*.zip" />
    </ItemGroup>
    <Copy
      DestinationFolder="$(PublishDir)build\"
      SourceFiles="@(SubPackagesToEmit)"
    />
  </Target>

</Project>
